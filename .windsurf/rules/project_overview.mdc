# CLAUDE.md

This file provides guidance to Windsurf when working with code in this repository.

## Project Overview

**Clippin** is a TikTok influencer marketing platform that connects brands with creators through performance-based campaigns. Creators submit TikTok videos to brand campaigns and earn money based on view performance using a CPM (cost per mille) model.

**Core Flow**: Brand creates campaign with budget → Creator discovers in marketplace → Creator submits TikTok video → Brand approves → Real-time view tracking → Automated earnings calculation → Creator payouts via Stripe Connect

**Architecture**: React frontend with Convex backend providing real-time database, authentication, serverless functions, file storage, and scheduled jobs.

**Deployment**: Connected to Convex deployment `enduring-snail-194`

## Development Commands

### Primary Workflow

```bash
npm run dev           # Start both frontend (Vite) and backend (Convex) concurrently
npm run dev:frontend  # Start only Vite development server with auto-open
npm run dev:backend   # Start only Convex backend in development mode
```

### Build & Validation

```bash
npm run build         # Build frontend for production
npm run lint          # Complete validation: TypeScript (frontend + Convex) + deployment test + build
```

### Testing

```bash
npm run test          # Run all tests using Vitest with convex-test integration
npm run test:coverage # Run tests with coverage reporting
npm run test:ui       # Run tests with Vitest UI interface
```

## Core Architecture

### Tech Stack

- **Frontend**: React 19, TypeScript, Vite, React Router v7, shadcn/ui, Tailwind CSS
- **Backend**: Convex (real-time database + serverless functions + auth + file storage)
- **Payments**: Stripe with Connect for creator payouts
- **External APIs**: TikTok API for view tracking, Resend for emails
- **Testing**: Vitest + convex-test with edge runtime environment

### Business Model Implementation

**User Types**:

- **Creators**: Submit TikTok videos, verify accounts, receive payouts based on views
- **Brands**: Create campaigns, set budgets, approve/reject submissions, fund campaigns

**Campaign Lifecycle**:

1. **Creation**: Brand creates campaign with budget, CPM rate, max payout limits
2. **Discovery**: Campaign appears in marketplace for creators
3. **Submission**: Creator submits TikTok URL (requires verification)
4. **Approval**: Brand approves/rejects submissions
5. **Tracking**: Smart monitoring system tracks views in real-time with tiered intervals
6. **Earnings**: Automatic calculation based on `viewCount * CPM rate` (capped by max payout)
7. **Payouts**: Stripe Connect transfers to creators when thresholds are met

### Data Model Relationships

**Core Tables**:

- `profiles` extends auth `users` with creator/brand-specific fields
- `campaigns` owned by brands with budget management and status workflow
- `submissions` link creators to campaigns with view counts and earnings
- `viewTracking` stores historical view data for trend analysis
- `payments` tracks all financial transactions (campaign funding + creator payouts)

**Key Relationships**:

- `profiles.userId` → `users._id` (extends Convex Auth)
- `campaigns.brandId` → `users._id` (brand ownership)
- `submissions.campaignId` + `submissions.creatorId` → campaigns and users
- `payments.userId` → `users._id` with type discrimination
- `viewTracking.submissionId` → `submissions._id` for historical data

### Smart Monitoring System

**Tiered View Tracking**:

- **Hot Tier**: 15-minute intervals for rapid growth videos (>1000 views/hour)
- **Warm Tier**: 1-hour intervals for moderate growth (100-1000 views/hour)
- **Cold Tier**: 6-hour intervals for slow growth (10-100 views/hour)
- **Archived Tier**: 24-hour intervals for minimal growth (<10 views/hour)

**Auto-tier Management**: System automatically adjusts monitoring frequency based on growth rate calculation from 24-hour view history.

## Critical Implementation Patterns

### Convex Function Syntax

**MANDATORY**: Always use the new Convex function syntax defined in `.cursor/rules/convex_rules.mdc`:

```typescript
import { query } from "./_generated/server";
import { v } from "convex/values";

export const functionName = query({
  args: { param: v.string() },
  returns: v.object({ result: v.string() }),
  handler: async (ctx, args) => {
    // function body
  },
});
```

**Requirements**:

- ALL Convex functions MUST include `args` and `returns` validators
- Use `v.null()` for functions that don't return values
- Use `internalQuery/Mutation/Action` for private functions
- Use `query/mutation/action` for public API functions

### Authentication Pattern

Standard Convex Auth integration:

```typescript
const identity = await ctx.auth.getUserIdentity();
if (!identity) throw new Error("Unauthenticated");

const profile = await ctx.db
  .query("profiles")
  .withIndex("by_user_id", (q) => q.eq("userId", identity.subject))
  .unique();
```

### TikTok API Integration

**Modular Client Architecture** (`convex/lib/tiktokApiClient.ts`):

- `RapidApiTikTokClient`: Production implementation using RapidAPI TikTok Scraper
- `MockTikTokApiClient`: Testing implementation with configurable responses
- `createTikTokApiClient()`: Factory function for environment-appropriate client

**Rate Limiting**: Built-in rate limiting with exponential backoff and retry logic

### Error Handling & Logging

**Centralized Logging**: Use `convex/logger.ts` for all server-side logging with structured data
**Error Handling**: Utilities in `src/lib/errorHandling.ts` for consistent error management
**Validation**: Zod schemas in `src/lib/validation.ts` for form and API validation

## Testing Architecture

### Framework Setup

- **Vitest** with `edge-runtime` environment for Convex compatibility
- **convex-test** for testing Convex functions with in-memory databases
- **Test timeout**: 30 seconds for long-running API tests

### Test Data Factory

Comprehensive builder pattern in `tests/factories/testDataFactory.ts`:

```typescript
// Create complete test scenarios
const { brand, campaign, creators } =
  ScenarioBuilder.create().createCampaignLifecycleScenario();

// Build individual entities
const campaign = CampaignBuilder.create()
  .withBrandId(brandId)
  .withBudget(10000)
  .asActive()
  .build();
```

**Testing Patterns**:

- Use `convexTest(schema)` for isolated database testing
- Test complete workflows: campaign creation → submission → view tracking → payouts
- Mock TikTok API calls using built-in `MockTikTokApiClient`
- Focus on business logic, earnings calculations, and edge cases

### Key Test Categories

- **Unit Tests**: Service layer functions (`convex/lib/` modules)
- **Integration Tests**: End-to-end campaign workflows
- **API Tests**: External API integration with mocking
- **Business Logic Tests**: Earnings calculations, monitoring tier logic

## Development Workflows

### File Organization

- **Frontend**: PascalCase React components (`CampaignDetails.tsx`)
- **Backend**: camelCase Convex functions with camelCase exports
- **UI Components**: kebab-case in `components/ui/` (shadcn/ui convention)
- **Business Logic**: Extracted to `convex/lib/` for testability

### Performance Optimization

- **Lazy Loading**: Heavy components (`CampaignDetails`, `CampaignMarketplace`, `Dashboard`)
- **Query Optimization**: Use indexed queries, avoid filters
- **Real-time Updates**: Leverage Convex subscriptions for live data
- **Bundle Analysis**: Monitor build output sizes

### State Management

- **Convex Queries**: Real-time reactive state management
- **React Hook Form**: Form state with Zod validation
- **URL State**: React Router for navigation state
- **Theme State**: `next-themes` for dark/light mode

## External Integrations

### TikTok API

- **Purpose**: Video view count tracking and creator verification
- **Implementation**: Modular client with production/mock variants
- **Rate Limiting**: Exponential backoff with `lastApiCall` timestamp tracking
- **Error Handling**: Graceful degradation with fallback strategies

### Stripe Integration

- **Campaign Payments**: PaymentIntents for brand campaign funding
- **Creator Payouts**: Stripe Connect for direct transfers to creators
- **Webhooks**: Payment status updates and Connect account events
- **Fee Structure**: Platform fees calculated on payouts

### Resend Email Service

- **Campaign Notifications**: Updates on campaign status changes
- **Payout Notifications**: Creator earnings and payment confirmations
- **System Alerts**: Administrative notifications for monitoring

## Performance & Monitoring

### Smart Monitoring

- **Tier System**: Automatic adjustment of view tracking frequency
- **Growth Rate Calculation**: Based on 24-hour rolling view history
- **Resource Optimization**: Reduced API calls through intelligent scheduling

### Rate Limiting

- **TikTok API**: Built-in rate limiting with retry logic
- **Internal Rate Limiter**: `convex/rateLimiter.ts` for additional API protection
- **Cron Job Scheduling**: Distributed load across time intervals

### Monitoring & Alerting

- **Smart Monitoring Stats**: Dashboard component for monitoring system performance
- **View Tracking Metrics**: Real-time charts for view growth analysis
- **Payment Tracking**: Financial transaction monitoring and reconciliation

## Important Implementation Notes

- **Database Queries**: Always use indexed queries for performance - schema includes comprehensive indexes
- **ID Types**: Strict TypeScript with proper `Id<"tableName">` types throughout
- **Real-time Updates**: Extensive use of Convex real-time subscriptions for live synchronization
- **File Storage**: Convex file storage for user uploads (company logos, profile assets)
- **Scheduled Jobs**: Cron jobs in `convex/crons.ts` for automated view tracking and payment processing
- **Environment Variables**: Store API keys and secrets in Convex environment variables
- **Security**: Never log sensitive information; use proper authentication checks for all mutations
